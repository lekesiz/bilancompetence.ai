/**\n * Deep Linking System for Mobile App\n * - Universal links (iOS)\n * - App links (Android)\n * - Deep link routing and handling\n */\n\nimport { LinkingOptions } from '@react-navigation/native';\n\n/**\n * Deep link prefixes\n */\nexport const DEEP_LINK_PREFIXES = [\n  'bilancompetence://',\n  'https://bilancompetence.ai/*',\n  'https://app.bilancompetence.ai/*',\n];\n\n/**\n * Deep link routes\n */\nexport const deepLinkingConfiguration: LinkingOptions<any> = {\n  prefixes: DEEP_LINK_PREFIXES,\n  config: {\n    screens: {\n      // Auth flows\n      Login: 'auth/login',\n      Register: 'auth/register',\n      ForgotPassword: 'auth/forgot-password/:token',\n      VerifyEmail: 'auth/verify-email/:token',\n\n      // Main navigation\n      MainNavigator: {\n        screens: {\n          Dashboard: 'dashboard',\n          Assessments: {\n            screens: {\n              AssessmentsScreen: 'assessments',\n              AssessmentDetailScreen: 'assessments/:assessmentId',\n            },\n          },\n          Messages: {\n            screens: {\n              MessagesScreen: 'messages',\n              ChatDetailScreen: 'messages/:conversationId',\n            },\n          },\n          Profile: 'profile',\n        },\n      },\n\n      // Direct links\n      Assessment: 'assessment/:assessmentId',\n      AssessmentQuestion: 'assessment/:assessmentId/question/:questionId',\n      Recommendation: 'recommendation/:recommendationId',\n      Conversation: 'conversation/:conversationId',\n      User: 'user/:userId',\n      Organization: 'organization/:organizationId',\n\n      // Modals\n      Settings: 'settings',\n      Preferences: 'preferences',\n      Profile: 'profile/edit',\n\n      // Actions\n      ShareAssessment: 'share/assessment/:assessmentId',\n      InviteUser: 'invite/:organizationId',\n    },\n  },\n};\n\n/**\n * Deep link URL builders\n */\nexport const deepLinks = {\n  // Auth\n  login: () => 'bilancompetence://auth/login',\n  register: () => 'bilancompetence://auth/register',\n  resetPassword: (token: string) => `bilancompetence://auth/forgot-password/${token}`,\n  verifyEmail: (token: string) => `bilancompetence://auth/verify-email/${token}`,\n\n  // Dashboard\n  dashboard: () => 'bilancompetence://dashboard',\n  profile: () => 'bilancompetence://profile',\n  settings: () => 'bilancompetence://settings',\n  preferences: () => 'bilancompetence://preferences',\n\n  // Assessments\n  assessments: () => 'bilancompetence://assessments',\n  assessment: (assessmentId: string) => `bilancompetence://assessments/${assessmentId}`,\n  assessmentQuestion: (assessmentId: string, questionId: string) =>\n    `bilancompetence://assessment/${assessmentId}/question/${questionId}`,\n  shareAssessment: (assessmentId: string) =>\n    `bilancompetence://share/assessment/${assessmentId}`,\n\n  // Messages\n  messages: () => 'bilancompetence://messages',\n  conversation: (conversationId: string) =>\n    `bilancompetence://messages/${conversationId}`,\n\n  // Recommendations\n  recommendation: (recommendationId: string) =>\n    `bilancompetence://recommendation/${recommendationId}`,\n\n  // Organizations\n  organization: (organizationId: string) =>\n    `bilancompetence://organization/${organizationId}`,\n  inviteUser: (organizationId: string) =>\n    `bilancompetence://invite/${organizationId}`,\n\n  // Users\n  user: (userId: string) => `bilancompetence://user/${userId}`,\n};\n\n/**\n * Parse deep link\n */\nexport interface ParsedDeepLink {\n  type: string;\n  params: Record<string, any>;\n  isValid: boolean;\n  error?: string;\n}\n\nexport function parseDeepLink(url: string): ParsedDeepLink {\n  try {\n    // Remove protocol\n    const cleanUrl = url.replace(/^(bilancompetence:\\/\\/)|(https:\\/\\/)/, '');\n\n    const parts = cleanUrl.split('/');\n    const [domain, ...pathParts] = parts;\n\n    // Extract route and parameters\n    const route = pathParts.join('/');\n    const [section, id] = pathParts;\n\n    // Parse query parameters if present\n    const queryIndex = route.indexOf('?');\n    const queryParams = new Map<string, string>();\n\n    if (queryIndex > -1) {\n      const queryString = route.substring(queryIndex + 1);\n      const params = new URLSearchParams(queryString);\n      params.forEach((value, key) => {\n        queryParams.set(key, value);\n      });\n    }\n\n    // Determine deep link type\n    if (route.includes('auth/login')) {\n      return {\n        type: 'login',\n        params: Object.fromEntries(queryParams),\n        isValid: true,\n      };\n    }\n\n    if (route.includes('auth/register')) {\n      return {\n        type: 'register',\n        params: { referral: queryParams.get('ref') || '' },\n        isValid: true,\n      };\n    }\n\n    if (route.includes('auth/forgot-password')) {\n      const token = pathParts[pathParts.indexOf('forgot-password') + 1];\n      return {\n        type: 'resetPassword',\n        params: { token },\n        isValid: !!token,\n        error: token ? undefined : 'Missing reset token',\n      };\n    }\n\n    if (route.includes('assessments')) {\n      if (pathParts[pathParts.length - 1].length > 0 && pathParts[pathParts.length - 1] !== 'assessments') {\n        const assessmentId = pathParts[pathParts.length - 1];\n        return {\n          type: 'assessmentDetail',\n          params: { assessmentId },\n          isValid: true,\n        };\n      }\n      return {\n        type: 'assessments',\n        params: {},\n        isValid: true,\n      };\n    }\n\n    if (route.includes('messages')) {\n      if (pathParts[pathParts.length - 1].length > 0 && pathParts[pathParts.length - 1] !== 'messages') {\n        const conversationId = pathParts[pathParts.length - 1];\n        return {\n          type: 'chatDetail',\n          params: { conversationId },\n          isValid: true,\n        };\n      }\n      return {\n        type: 'messages',\n        params: {},\n        isValid: true,\n      };\n    }\n\n    if (route.includes('recommendation')) {\n      const recommendationId = pathParts[pathParts.indexOf('recommendation') + 1];\n      return {\n        type: 'recommendation',\n        params: { recommendationId },\n        isValid: !!recommendationId,\n        error: recommendationId ? undefined : 'Missing recommendation ID',\n      };\n    }\n\n    if (route.includes('profile')) {\n      return {\n        type: 'profile',\n        params: {},\n        isValid: true,\n      };\n    }\n\n    if (route.includes('dashboard')) {\n      return {\n        type: 'dashboard',\n        params: {},\n        isValid: true,\n      };\n    }\n\n    return {\n      type: 'unknown',\n      params: {},\n      isValid: false,\n      error: 'Unknown deep link format',\n    };\n  } catch (error) {\n    return {\n      type: 'error',\n      params: {},\n      isValid: false,\n      error: (error as Error).message,\n    };\n  }\n}\n\n/**\n * Handle deep link navigation\n */\nexport function handleDeepLink(\n  url: string,\n  navigation: any\n): void {\n  const parsed = parseDeepLink(url);\n\n  if (!parsed.isValid) {\n    console.warn('Invalid deep link:', parsed.error);\n    return;\n  }\n\n  // Navigate based on type\n  switch (parsed.type) {\n    case 'login':\n      navigation.navigate('Login');\n      break;\n\n    case 'register':\n      navigation.navigate('Register', { referral: parsed.params.referral });\n      break;\n\n    case 'resetPassword':\n      navigation.navigate('ForgotPassword', { token: parsed.params.token });\n      break;\n\n    case 'dashboard':\n      navigation.navigate('MainNavigator', {\n        screen: 'Dashboard',\n      });\n      break;\n\n    case 'assessments':\n      navigation.navigate('MainNavigator', {\n        screen: 'Assessments',\n        params: {\n          screen: 'AssessmentsScreen',\n        },\n      });\n      break;\n\n    case 'assessmentDetail':\n      navigation.navigate('MainNavigator', {\n        screen: 'Assessments',\n        params: {\n          screen: 'AssessmentDetailScreen',\n          params: { assessmentId: parsed.params.assessmentId },\n        },\n      });\n      break;\n\n    case 'messages':\n      navigation.navigate('MainNavigator', {\n        screen: 'Messages',\n        params: {\n          screen: 'MessagesScreen',\n        },\n      });\n      break;\n\n    case 'chatDetail':\n      navigation.navigate('MainNavigator', {\n        screen: 'Messages',\n        params: {\n          screen: 'ChatDetailScreen',\n          params: { conversationId: parsed.params.conversationId },\n        },\n      });\n      break;\n\n    case 'profile':\n      navigation.navigate('MainNavigator', {\n        screen: 'Profile',\n      });\n      break;\n\n    case 'recommendation':\n      navigation.navigate('MainNavigator', {\n        screen: 'Dashboard',\n        params: {\n          openRecommendation: parsed.params.recommendationId,\n        },\n      });\n      break;\n\n    default:\n      console.warn('Unhandled deep link type:', parsed.type);\n  }\n}\n\n/**\n * Generate shareable deep link\n */\nexport function generateShareableLink(\n  type: string,\n  params: Record<string, string>\n): string {\n  const baseUrl = 'https://app.bilancompetence.ai';\n\n  switch (type) {\n    case 'assessment':\n      return `${baseUrl}/assessments/${params.assessmentId}`;\n\n    case 'recommendation':\n      return `${baseUrl}/recommendation/${params.recommendationId}`;\n\n    case 'invite':\n      return `${baseUrl}/invite/${params.organizationId}?code=${params.code}`;\n\n    case 'referral':\n      return `${baseUrl}/register?ref=${params.referralCode}`;\n\n    default:\n      return `${baseUrl}`;\n  }\n}\n\nexport default {\n  deepLinkingConfiguration,\n  deepLinks,\n  parseDeepLink,\n  handleDeepLink,\n  generateShareableLink,\n};\n