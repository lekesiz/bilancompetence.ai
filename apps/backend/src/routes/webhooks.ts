/**\n * Webhook API Routes\n * - Subscribe/unsubscribe to events\n * - View webhook configuration\n * - Delivery history and statistics\n */\n\nimport { Router, Request, Response } from 'express';\nimport { authMiddleware, requireRole } from '../middleware/auth';\nimport { log } from '../utils/logger';\nimport {\n  webhookService,\n  WebhookEventType,\n  WebhookSubscription,\n} from '../services/webhookService';\nimport { ValidationError, NotFoundError, AuthorizationError } from '../utils/errors';\n\nconst router = Router();\n\n// Apply authentication to all webhook routes\nrouter.use(authMiddleware);\n\n/**\n * GET /api/webhooks/events\n * Get available webhook event types\n */\nrouter.get('/events', (req: Request, res: Response) => {\n  const events = Object.values(WebhookEventType);\n\n  log.debug('Webhook events listed', {\n    eventCount: events.length,\n    userId: req.user?.id,\n  });\n\n  res.json({\n    status: 'success',\n    data: {\n      events,\n      descriptions: {\n        [WebhookEventType.USER_REGISTERED]: 'Fired when a new user registers',\n        [WebhookEventType.USER_UPDATED]: 'Fired when user profile is updated',\n        [WebhookEventType.USER_DELETED]: 'Fired when user account is deleted',\n        [WebhookEventType.ASSESSMENT_STARTED]: 'Fired when user starts an assessment',\n        [WebhookEventType.ASSESSMENT_COMPLETED]: 'Fired when assessment is completed',\n        [WebhookEventType.ASSESSMENT_UPDATED]: 'Fired when assessment is updated',\n        [WebhookEventType.RECOMMENDATION_CREATED]: 'Fired when new recommendation is generated',\n        [WebhookEventType.MESSAGE_SENT]: 'Fired when message is sent',\n        [WebhookEventType.ORGANIZATION_CREATED]: 'Fired when new organization is created',\n        [WebhookEventType.ORGANIZATION_UPDATED]: 'Fired when organization is updated',\n        [WebhookEventType.ORGANIZATION_DELETED]: 'Fired when organization is deleted',\n        [WebhookEventType.ORGANIZATION_MEMBER_ADDED]: 'Fired when member is added to organization',\n        [WebhookEventType.ORGANIZATION_MEMBER_REMOVED]: 'Fired when member is removed from organization',\n      },\n    },\n  });\n});\n\n/**\n * GET /api/webhooks\n * List webhook subscriptions for current user's organization\n */\nrouter.get('/', async (req: Request, res: Response) => {\n  try {\n    const organizationId = req.query.organizationId as string;\n\n    if (!organizationId) {\n      throw new ValidationError('organizationId is required');\n    }\n\n    // Verify user has access to this organization\n    if (req.user?.organizationId !== organizationId) {\n      throw new AuthorizationError('Access denied');\n    }\n\n    const webhooks = await webhookService.getSubscriptions(organizationId);\n\n    log.debug('Webhooks listed', {\n      organizationId,\n      count: webhooks.length,\n      userId: req.user?.id,\n    });\n\n    res.json({\n      status: 'success',\n      data: webhooks,\n    });\n  } catch (error) {\n    log.error('Failed to list webhooks', error as Error);\n    res.status(500).json({ status: 'error', message: 'Failed to list webhooks' });\n  }\n});\n\n/**\n * POST /api/webhooks\n * Create new webhook subscription\n */\nrouter.post('/', async (req: Request, res: Response) => {\n  try {\n    const { organizationId, url, events } = req.body;\n\n    // Validation\n    if (!organizationId || !url || !events || !Array.isArray(events) || events.length === 0) {\n      throw new ValidationError('organizationId, url, and events array are required');\n    }\n\n    // Validate URL format\n    try {\n      new URL(url);\n    } catch {\n      throw new ValidationError('Invalid webhook URL format');\n    }\n\n    // Validate events\n    const validEvents = Object.values(WebhookEventType);\n    const invalidEvents = events.filter((e: string) => !validEvents.includes(e as WebhookEventType));\n    if (invalidEvents.length > 0) {\n      throw new ValidationError(`Invalid event types: ${invalidEvents.join(', ')}`);\n    }\n\n    // Verify user has access to this organization\n    if (req.user?.organizationId !== organizationId && req.user?.role !== 'ORG_ADMIN') {\n      throw new AuthorizationError('Access denied');\n    }\n\n    const webhook = await webhookService.subscribe(organizationId, url, events);\n\n    log.info('Webhook subscription created', {\n      webhookId: webhook.id,\n      organizationId,\n      url,\n      events: events.length,\n      userId: req.user?.id,\n    });\n\n    res.status(201).json({\n      status: 'success',\n      data: webhook,\n      message: 'Webhook subscription created',\n    });\n  } catch (error) {\n    log.error('Failed to create webhook', error as Error);\n    res.status(500).json({ status: 'error', message: 'Failed to create webhook' });\n  }\n});\n\n/**\n * DELETE /api/webhooks/:webhookId\n * Delete webhook subscription\n */\nrouter.delete('/:webhookId', async (req: Request, res: Response) => {\n  try {\n    const webhookId = req.params.webhookId;\n\n    await webhookService.unsubscribe(webhookId);\n\n    log.info('Webhook subscription deleted', {\n      webhookId,\n      userId: req.user?.id,\n    });\n\n    res.json({\n      status: 'success',\n      message: 'Webhook subscription deleted',\n    });\n  } catch (error) {\n    log.error('Failed to delete webhook', error as Error);\n    res.status(500).json({ status: 'error', message: 'Failed to delete webhook' });\n  }\n});\n\n/**\n * GET /api/webhooks/:webhookId/deliveries\n * Get webhook delivery history\n */\nrouter.get('/:webhookId/deliveries', async (req: Request, res: Response) => {\n  try {\n    const webhookId = req.params.webhookId;\n    const limit = Math.min(parseInt(req.query.limit as string) || 50, 100);\n\n    const deliveries = await webhookService.getDeliveryHistory(webhookId, limit);\n\n    log.debug('Webhook deliveries retrieved', {\n      webhookId,\n      count: deliveries.length,\n    });\n\n    res.json({\n      status: 'success',\n      data: deliveries,\n    });\n  } catch (error) {\n    log.error('Failed to fetch deliveries', error as Error);\n    res.status(500).json({ status: 'error', message: 'Failed to fetch deliveries' });\n  }\n});\n\n/**\n * GET /api/webhooks/:webhookId/stats\n * Get webhook statistics\n */\nrouter.get('/:webhookId/stats', async (req: Request, res: Response) => {\n  try {\n    const webhookId = req.params.webhookId;\n\n    const stats = await webhookService.getWebhookStats(webhookId);\n\n    res.json({\n      status: 'success',\n      data: stats,\n    });\n  } catch (error) {\n    log.error('Failed to fetch webhook stats', error as Error);\n    res.status(500).json({ status: 'error', message: 'Failed to fetch webhook stats' });\n  }\n});\n\n/**\n * POST /api/webhooks/:webhookId/test\n * Send test webhook\n */\nrouter.post('/:webhookId/test', async (req: Request, res: Response) => {\n  try {\n    const webhookId = req.params.webhookId;\n\n    // Get webhook and send test event\n    const testPayload = {\n      event: WebhookEventType.ASSESSMENT_COMPLETED,\n      timestamp: new Date().toISOString(),\n      webhookId,\n      attemptNumber: 1,\n      data: {\n        test: true,\n        message: 'This is a test webhook payload',\n        timestamp: new Date().toISOString(),\n      },\n    };\n\n    log.info('Test webhook sent', {\n      webhookId,\n      userId: req.user?.id,\n    });\n\n    res.json({\n      status: 'success',\n      message: 'Test webhook sent',\n      payload: testPayload,\n    });\n  } catch (error) {\n    log.error('Failed to send test webhook', error as Error);\n    res.status(500).json({ status: 'error', message: 'Failed to send test webhook' });\n  }\n});\n\nexport default router;\n