# Multi-stage build for BilanCompetence Backend\n\n# Stage 1: Build\nFROM node:18-alpine AS builder\n\nWORKDIR /build\n\n# Copy package files\nCOPY package*.json ./\nCOPY apps/backend/package*.json ./apps/backend/\n\n# Install dependencies\nRUN npm ci\nRUN cd apps/backend && npm ci\n\n# Copy source code\nCOPY apps/backend ./apps/backend\nCOPY apps/backend/tsconfig.json ./\n\n# Build\nRUN cd apps/backend && npm run build\n\n# Stage 2: Runtime\nFROM node:18-alpine\n\nLABEL maintainer=\"BilanCompetence Team\"\nLABEL version=\"1.0.0\"\nLABEL description=\"BilanCompetence API Server\"\n\nWORKDIR /app\n\n# Install dumb-init for proper signal handling\nRUN apk add --no-cache dumb-init\n\n# Copy package files\nCOPY package*.json ./\nCOPY apps/backend/package*.json ./\n\n# Install production dependencies only\nRUN npm ci --only=production\n\n# Copy built application from builder\nCOPY --from=builder /build/apps/backend/dist ./dist\nCOPY --from=builder /build/apps/backend/src ./src\n\n# Create logs directory\nRUN mkdir -p logs\n\n# Create non-root user\nRUN addgroup -g 1001 -S nodejs && adduser -S nodejs -u 1001\nRUN chown -R nodejs:nodejs /app\nUSER nodejs\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \\\n  CMD node -e \"require('http').get('http://localhost:3001/health', (r) => {if (r.statusCode !== 200) throw new Error(r.statusCode)})\"\n\n# Expose port\nEXPOSE 3001\n\n# Use dumb-init to handle signals properly\nENTRYPOINT [\"/sbin/dumb-init\", \"--\"]\n\n# Start application\nCMD [\"node\", \"dist/index.js\"]\n