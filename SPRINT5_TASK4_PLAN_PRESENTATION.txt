================================================================================
          SPRINT 5/6 - TASK 4: FRANCE TRAVAIL INTEGRATION PLAN
                    Detaylı Proje Planı & Görsel Özet
================================================================================

✅ PLAN DURUMU: TAMAMLANDI VE ONAY BEKLENIYOR

================================================================================
  1. NE YAPIYORUZ? (What)
================================================================================

Kullanıcıların assessment'larından çıkan yetkinliklerini France Travail
(eski Pôle emploi) API'si ile eşleştirerek, uygun iş ilanlarını bulmalarını
ve tavsiye etmelerini sağlayan bir Job Recommendation Engine geliştirelim.

ÖRNEK SENARYO:
┌─────────────────────────────────────────────────────────┐
│ Kullanıcı Assessment'ını Tamamladı:                     │
│                                                         │
│ Yetkinlikler:                                           │
│  ✓ Java (Expert)                                        │
│  ✓ Spring Boot (Advanced)                               │
│  ✓ Docker (Intermediate)                                │
│                                                         │
│ ↓ Sistem Otomatikman Eşleştiriyor ↓                    │
│                                                         │
│ ROME Kodları: E1101, E1102, C1501                       │
│                                                         │
│ ↓ France Travail API'den İş İlanı Arıyor ↓            │
│                                                         │
│ Sonuç: 142 uygun iş ilanı bulundu                       │
│                                                         │
│ ↓ Puanlama (Match Score) ↓                              │
│                                                         │
│ 🥇 Ingénieur Senior Java - 92% match                    │
│ 🥈 Développeur Python - 87% match                       │
│ 🥉 DevOps Engineer - 85% match                          │
│                                                         │
│ Kullanıcı ilanları görüp, kaydedip, başvurabiliyor!    │
└─────────────────────────────────────────────────────────┘

================================================================================
  2. NASIL YAPACAĞIZ? (How) - 5 AŞAMA
================================================================================

PHASE 1: BACKEND SERVICE (2-2.5 saat)
├─ File: apps/backend/src/services/franceTravailService.ts
├─ Size: 800-1000 satır
└─ Fonksiyonlar:
   ├─ Authentication (OAuth 2.0 Token Management)
   ├─ Job Search (ROME kodu ile iş ara)
   ├─ ROME Code Management (İş sınıflandırması)
   ├─ Competency Mapping (Yetkinlik → ROME eşleştirme)
   ├─ Skill Matching (Puanlama algoritması)
   ├─ Data Processing (Cache, format, parse)
   └─ Error Handling (Retry, fallback, logging)

PHASE 2: BACKEND API ENDPOINTS (1-1.5 saat)
├─ File: apps/backend/src/routes/recommendations.ts
├─ Endpoints:
│  ├─ POST /api/recommendations/jobs
│  │  → User assessment'ına göre iş önerileri getir
│  │
│  ├─ POST /api/recommendations/:jobId/save
│  │  → Bir iş ilanını kaydet
│  │
│  ├─ GET /api/users/:userId/saved-jobs
│  │  → Kullanıcının kaydedilen iş ilanlarını görüntüle
│  │
│  ├─ GET /api/rome-codes/:code
│  │  → ROME kod detaylarını getir
│  │
│  └─ GET /api/rome-codes/search
│     → ROME kodlarını anahtar keliме ile ara

PHASE 3: FRONTEND BİLEŞENLERİ (1-1.5 saat)
├─ Location: apps/frontend/components/
├─ Bileşenler:
│  ├─ JobRecommendationCard
│  │  └─ Tek iş kartı (başlık, firma, match % vs)
│  ├─ JobRecommendationsList
│  │  └─ Filtreleme ve sıralamalı iş listesi
│  ├─ JobCompetencyMatcher
│  │  └─ Yetkinlik eşleşme görselleştirmesi
│  ├─ JobDetailsModal
│  │  └─ Detaylı iş görünümü
│  └─ SavedJobsList
│     └─ Kaydedilen iş ilanları

PHASE 4: FRONTEND SAYFALAR (0.5-1 saat)
├─ /recommendations
│  └─ Ana job recommendations dashboard
├─ /saved-jobs
│  └─ Kaydedilen iş ilanları sayfası
└─ /assessments/[id] (Güncelle)
   └─ Assessment'a "Recommended Jobs" bölümü ekle

PHASE 5: TEST & ENTEGRASYON (0.5-1 saat)
├─ Unit Tests (60+ test case)
├─ Integration Tests (20+ test case)
├─ E2E Workflow Tests
├─ Performance Optimization
└─ Cache Validation

TOPLAM TAHMINI SÜRE: 5.5-7 saat (Hedef: 4-6 saat)

================================================================================
  3. DİZAYN ÖZET (Architecture Overview)
================================================================================

USER INTERFACE FLOW:
┌──────────────────────────────────────────────────────────┐
│  KULLANICI Assessment'ını Tamamlıyor                     │
│  Yetkinlikler: Java, Spring Boot, Docker                │
└─────────────────┬──────────────────────────────────────┘
                  │
                  ▼
┌──────────────────────────────────────────────────────────┐
│  Frontend: GET /api/recommendations/jobs                │
│  ?assessmentId=xyz&limit=10&filters={...}               │
└─────────────────┬──────────────────────────────────────┘
                  │
                  ▼
┌──────────────────────────────────────────────────────────┐
│  Backend franceTravailService:                          │
│  1. Assessment yetkinliklerini oku                      │
│  2. ROME kodlarına eşleştir (Java → E1101)              │
│  3. France Travail API'den iş ara                       │
│  4. Her iş için match score hesapla                     │
│  5. Sonuçları sırala (En yüksek match ilk)             │
│  6. Cache'ye kaydet (TTL: 1 saat)                       │
│  7. Response döndür                                     │
└─────────────────┬──────────────────────────────────────┘
                  │
                  ▼
┌──────────────────────────────────────────────────────────┐
│  Frontend: JobRecommendationsList'i Render Et            │
│  ┌────────────────────────────────────────────────────┐ │
│  │ 🥇 Ingénieur Senior Java - TechCorp               │ │
│  │    92% match  |  CDI  |  €3500/mo  |  Paris       │ │
│  │    ✓ Java  ✓ Spring Boot  ✗ Docker               │ │
│  │    [View Details]  [Save Job]                     │ │
│  ├────────────────────────────────────────────────────┤ │
│  │ 🥈 Développeur Python - StartupXY                │ │
│  │    87% match  |  CDI  |  €3200/mo  |  Lyon        │ │
│  │    ✓ Python  ✓ Docker  ✗ Java                    │ │
│  │    [View Details]  [Save Job]                     │ │
│  └────────────────────────────────────────────────────┘ │
└──────────────────────────────────────────────────────────┘

FRANCE TRAVAIL API INTERACTION:
┌─────────────────────────┐
│  franceTravailService   │
├─────────────────────────┤
│ ┌─────────────────────┐ │
│ │ Auth: OAuth 2.0     │ │
│ │ Client Credentials  │ │
│ │ Token Caching       │ │
│ └─────────────────────┘ │
│           │             │
│           ▼             │
│ ┌─────────────────────┐ │
│ │ API Calls:          │ │
│ │ • Search Jobs       │ │
│ │ • Get ROME Code     │ │
│ │ • Search ROME Codes │ │
│ └─────────────────────┘ │
│           │             │
│           ▼             │
│ ┌─────────────────────┐ │
│ │ Response Processing │ │
│ │ • Score Jobs        │ │
│ │ • Format Data       │ │
│ │ • Cache Results     │ │
│ └─────────────────────┘ │
└─────────────────────────┘
           │
           ▼
    France Travail API
    https://api.francetravail.io/v1

================================================================================
  4. TEKNİK AYRINTI (Technical Details)
================================================================================

FRANCE TRAVAIL API AUTHENTICATION:
┌──────────────────────────────────────────────────┐
│ Grant Type: client_credentials (OAuth 2.0)       │
│                                                  │
│ Request:                                         │
│   POST /oauth/authorize                          │
│   Headers:                                       │
│     Content-Type: application/x-www-form-urlencoded
│   Body:                                          │
│     grant_type=client_credentials                │
│     client_id=YOUR_CLIENT_ID                     │
│     client_secret=YOUR_CLIENT_SECRET             │
│     scope=api/readonly                           │
│                                                  │
│ Response:                                        │
│   {                                              │
│     "access_token": "token_here",                │
│     "token_type": "Bearer",                      │
│     "expires_in": 3600,                          │
│     "scope": "api/readonly"                      │
│   }                                              │
│                                                  │
│ Usage:                                           │
│   Authorization: Bearer {access_token}          │
│                                                  │
│ Token Refresh: Otomatik (süresi dolunca)         │
└──────────────────────────────────────────────────┘

ROME CODE EŞLEŞTİRME ALGORİTMASI:
┌─────────────────────────────────────────────────┐
│ Input: Kullanıcı Yetkinlikleri                  │
│ ["Java" (Expert), "Python" (Advanced)]          │
│                                                 │
│ Step 1: Exact Match                             │
│ Java → E1101, E1102, C1501                      │
│ Python → E1101, E1102, E1103                    │
│                                                 │
│ Step 2: Ağırlık Hesapla (Proficiency)          │
│ Expert × 1.0 = 1.0                              │
│ Advanced × 0.9 = 0.9                            │
│                                                 │
│ Step 3: ROME Kod Skorla                         │
│ E1101: (1.0 + 0.9) = 1.9                        │
│ E1102: (1.0 + 0.9) = 1.9                        │
│ C1501: 1.0                                      │
│                                                 │
│ Step 4: En İyi ROME Kodlarını Seç               │
│ Top 3: E1101, E1102, C1501                      │
│                                                 │
│ Output: ROME kodları                            │
│ France Travail API'ye gönder                    │
└─────────────────────────────────────────────────┘

JOB MATCH SCORE CALCULATION:
┌──────────────────────────────────────────────────┐
│ Job: Ingénieur Senior Java - TechCorp           │
│ Required Skills: Java, Microservices, Docker    │
│                                                 │
│ User Has:                                       │
│ ✓ Java (Expert) → Match × 1.0                  │
│ ✓ Microservices (Advanced) → Match × 0.9       │
│ ✗ Docker (Missing) → Gap × 0.0                 │
│                                                 │
│ Calculation:                                    │
│ Matched: 2 out of 3 = 66.7%                    │
│ Quality Bonus: Expert + Advanced = +25%        │
│ Gap Penalty: Missing 1 critical = -0%          │
│                                                 │
│ Final Score: 92%  ✅                            │
└──────────────────────────────────────────────────┘

CACHING STRATEGY:
┌──────────────────────────────────────────────────┐
│ Level 1: Token Cache                             │
│   Storage: Memory                                │
│   TTL: Until expires                             │
│   Hit Rate: ~99%                                 │
│                                                  │
│ Level 2: Job Recommendations Cache               │
│   Key: {userId}_{assessmentId}_{filters}        │
│   Storage: Redis/Memory                          │
│   TTL: 1 hour                                    │
│   Hit Rate Target: > 80%                         │
│                                                  │
│ Level 3: ROME Code Cache                         │
│   Key: {romeCode}                                │
│   Storage: Database + Memory                     │
│   TTL: 24 hours                                  │
│   Hit Rate Target: > 90%                         │
└──────────────────────────────────────────────────┘

================================================================================
  5. DOSYA YAPISI (File Structure)
================================================================================

Backend Services:
  📄 apps/backend/src/services/franceTravailService.ts (NEW - 800 lines)
     └─ Authentication, Job Search, ROME Management, Matching

Backend Routes:
  📄 apps/backend/src/routes/recommendations.ts (NEW - 350 lines)
     └─ 5 API endpoints

Backend Tests:
  📄 apps/backend/src/__tests__/services/franceTravailService.test.ts (NEW)
  📄 apps/backend/src/__tests__/routes/recommendations.integration.test.ts (NEW)

Frontend Components:
  📄 apps/frontend/components/JobRecommendationCard.tsx (NEW)
  📄 apps/frontend/components/JobRecommendationsList.tsx (NEW)
  📄 apps/frontend/components/JobCompetencyMatcher.tsx (NEW)
  📄 apps/frontend/components/JobDetailsModal.tsx (NEW)
  📄 apps/frontend/components/SavedJobsList.tsx (NEW)

Frontend Pages:
  📄 apps/frontend/app/(protected)/recommendations/page.tsx (NEW)
  📄 apps/frontend/app/(protected)/saved-jobs/page.tsx (NEW)
  📄 apps/frontend/app/(protected)/assessments/[id]/page.tsx (MODIFY)

Frontend Hooks:
  📄 apps/frontend/hooks/useJobRecommendations.ts (NEW)

Database:
  📄 SQL migrations (NEW):
     └─ job_recommendations table
     └─ saved_jobs table
     └─ rome_code_cache table

================================================================================
  6. ENVIRONMENT VARİABLELERİ (Configuration)
================================================================================

Eklenecek Environment Variables (.env.example'a):

FRANCE_TRAVAIL_API_BASE_URL=https://api.francetravail.io/v1
FRANCE_TRAVAIL_CLIENT_ID=your_client_id
FRANCE_TRAVAIL_CLIENT_SECRET=your_client_secret
FRANCE_TRAVAIL_API_KEY=your_api_key
FRANCE_TRAVAIL_GRANT_TYPE=client_credentials
FRANCE_TRAVAIL_SCOPE=api/readonly

JOB_RECOMMENDATION_CACHE_TTL=3600      # 1 hour
ROME_CODE_CACHE_TTL=86400              # 24 hours

FRANCE_TRAVAIL_RATE_LIMIT=100           # requests/hour

================================================================================
  7. İSTATİSTİKLER (Statistics)
================================================================================

Yazılacak Kod:
├─ Backend Service: 800+ lines
├─ Backend Routes: 350+ lines
├─ Backend Tests: 600+ + 500+ lines
├─ Frontend Components: 500+ lines (5 components)
├─ Frontend Pages: 300+ lines (2 pages + 1 modify)
└─ Frontend Hooks: 150+ lines

TOTAL: 3,100+ lines of NEW code

Test Coverage:
├─ Unit Tests: 60+ test cases
├─ Integration Tests: 20+ test cases
├─ E2E Tests: 5+ scenarios
└─ Coverage Target: 70%+ critical paths

Documentation:
├─ Implementation Plan: 400+ lines
├─ Plan Summary: 250+ lines
├─ Code Comments: Comprehensive JSDoc
└─ API Documentation: Inline

================================================================================
  8. BAŞARI KRİTERLERİ (Success Criteria)
================================================================================

✅ Fonksiyonel:
   [ ] France Travail API authentication works
   [ ] Jobs retrieved based on competencies
   [ ] Match scores calculated (0-100%)
   [ ] Users can save jobs
   [ ] Results cached efficiently
   [ ] All error scenarios handled

✅ Performans:
   [ ] Job recommendation fetch < 2 seconds
   [ ] List rendering < 500ms
   [ ] Cache hit rate > 80%
   [ ] No N+1 database queries

✅ Kod Kalitesi:
   [ ] TypeScript: Zero errors
   [ ] Test coverage: 70%+
   [ ] All endpoints documented
   [ ] User-friendly error messages

✅ UX:
   [ ] Clear match score visualization
   [ ] Smooth loading states
   [ ] Mobile responsive
   [ ] Intuitive filtering/sorting

================================================================================
  9. ZAMAN LİNESİ (Timeline)
================================================================================

Phase 1 (Backend Service):    2-2.5 hours  ████████░░  40%
Phase 2 (API Endpoints):      1-1.5 hours  ██████░░░░  20%
Phase 3 (Components):         1-1.5 hours  ██████░░░░  20%
Phase 4 (Pages):              0.5-1 hour   ███░░░░░░░  10%
Phase 5 (Testing):            0.5-1 hour   ███░░░░░░░  10%
                             ────────────────────────────────
TOTAL:                        5.5-7 hours  (Hedef: 4-6 saat)

================================================================================
  10. RİSK ANALIZI (Risk Mitigation)
================================================================================

Risk 1: France Travail API Kapanması
  → Çözüm: Cache fallback, graceful degradation

Risk 2: Rate Limit Aşılması
  → Çözüm: Queue system, intelligent caching, batching

Risk 3: Yanlış Eşleştirme
  → Çözüm: Curated mapping table, continuous improvement

Risk 4: Performans Sorunları
  → Çözüm: Caching, pagination, lazy loading, optimization

Risk 5: Authentication Hatası
  → Çözüm: Comprehensive error handling, monitoring

================================================================================
  11. SONRAKI ADIM (Next Steps)
================================================================================

1. ✅ Plan hazırlandı (tamamlandı)
2. ⏳ Plan onayı bekleniyor (SIZIN ONAYINIZ)
3. ⏳ Implementation başlanacak
   - Phase 1: Backend Service
   - Phase 2: API Endpoints
   - Phase 3: Frontend Components
   - Phase 4: Frontend Pages
   - Phase 5: Testing
4. ⏳ Testing
5. ⏳ Code Review
6. ⏳ Git Commit & Push
7. ⏳ Deployment

================================================================================
  12. ONAY LİSTESİ (Approval Checklist)
================================================================================

Aşağıdaki hususları kontrol edin ve onaylayın:

[ ] Plan tüm gereklilikleri ele alıyor
[ ] Mimarı sağlam ve ölçeklenebilir
[ ] Zaman çizelgesi gerçekçi
[ ] Risk yönetimi yeterli
[ ] Frontend/Backend yaklaşımı doğru
[ ] Environment variables tanımlanmış
[ ] Başarı kriterleri netleştirilmiş
[ ] Test stratejisi kapsamlı

Hazır mısınız? 🚀

================================================================================

Hazırlayan: Claude
Tarih: 2025-10-22
Durum: ✅ PLAN TAMAMLANDI - ONAY BEKLENIYOR

Detaylı planlar için bkz:
- SPRINT5_TASK4_FRANCE_TRAVAIL_INTEGRATION_PLAN.md (Detaylı Plan)
- SPRINT5_TASK4_PLAN_SUMMARY.md (Hızlı Referans)

================================================================================
