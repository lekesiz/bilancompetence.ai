version: '3.9'

services:
  # ============================================
  # PostgreSQL Database
  # ============================================
  postgres:
    image: postgres:15-alpine
    container_name: bilancompetence-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-bilancompetence}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./apps/backend/migrations:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bilancompetence

  # ============================================
  # Redis Cache & Session Store
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: bilancompetence-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bilancompetence

  # ============================================
  # Backend API Server
  # ============================================
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    container_name: bilancompetence-backend
    restart: unless-stopped
    environment:
      # Core
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3001
      
      # Database - Neon PostgreSQL (Production) or Local Postgres (Development)
      DATABASE_URL: ${DATABASE_URL:-postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@postgres:5432/${DB_NAME:-bilancompetence}}
      DB_POOL_MIN: ${DB_POOL_MIN:-2}
      DB_POOL_MAX: ${DB_POOL_MAX:-10}
      
      # Redis
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      REDIS_NAMESPACE: bilancompetence
      
      # Legacy Supabase (being phased out)
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      
      # Authentication
      JWT_SECRET: ${JWT_SECRET:-dev-jwt-secret-change-in-production}
      JWT_ACCESS_TOKEN_EXPIRY: ${JWT_ACCESS_TOKEN_EXPIRY:-15m}
      JWT_REFRESH_TOKEN_EXPIRY: ${JWT_REFRESH_TOKEN_EXPIRY:-7d}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-10}
      
      # CORS & Security
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000,http://localhost:3001}
      HELMET_ENABLED: ${HELMET_ENABLED:-true}
      
      # Email Service
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      SENDGRID_FROM_EMAIL: ${SENDGRID_FROM_EMAIL:-noreply@bilancompetence.ai}
      SENDGRID_FROM_NAME: ${SENDGRID_FROM_NAME:-BilanCompetence}
      
      # External APIs
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      FRANCE_TRAVAIL_API_KEY: ${FRANCE_TRAVAIL_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # Storage
      STORAGE_BUCKET: ${STORAGE_BUCKET:-bilancompetence-files}
      STORAGE_URL: ${STORAGE_URL}
      STORAGE_MAX_FILE_SIZE: ${STORAGE_MAX_FILE_SIZE:-52428800}
      
      # Rate Limiting
      RATE_LIMIT_GENERAL: ${RATE_LIMIT_GENERAL:-100}
      RATE_LIMIT_AUTH: ${RATE_LIMIT_AUTH:-5}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-debug}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      
      # URLs
      APP_URL: ${APP_URL:-http://localhost:3000}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN}
      SENTRY_ENVIRONMENT: ${SENTRY_ENVIRONMENT:-development}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/backend:/app
      - /app/node_modules
      - backend_logs:/app/logs
    command: sh -c "pnpm install && pnpm run dev"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - bilancompetence

  # ============================================
  # Frontend Next.js Application
  # ============================================
  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3001/api}
        NEXT_PUBLIC_REALTIME_URL: ${NEXT_PUBLIC_REALTIME_URL:-http://localhost:3001}
    container_name: bilancompetence-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3001/api}
      NEXT_PUBLIC_REALTIME_URL: ${NEXT_PUBLIC_REALTIME_URL:-http://localhost:3001}
      NEXT_PUBLIC_APP_NAME: ${NEXT_PUBLIC_APP_NAME:-BilanCompetence}
      NEXT_PUBLIC_APP_VERSION: ${NEXT_PUBLIC_APP_VERSION:-1.0.0}
      NEXT_PUBLIC_GA_MEASUREMENT_ID: ${NEXT_PUBLIC_GA_MEASUREMENT_ID}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./apps/frontend:/app
      - /app/node_modules
      - /app/.next
    command: sh -c "pnpm install && pnpm run dev"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - bilancompetence

  # ============================================
  # pgAdmin - Database Management UI (Optional)
  # ============================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: bilancompetence-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@bilancompetence.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - bilancompetence
    profiles:
      - tools

  # ============================================
  # Nginx Reverse Proxy (Optional)
  # ============================================
  nginx:
    image: nginx:alpine
    container_name: bilancompetence-nginx
    restart: unless-stopped
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - bilancompetence
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  backend_logs:
    driver: local

networks:
  bilancompetence:
    driver: bridge
    name: bilancompetence-network

